//-----------------------------------------------------------------------------
// <auto-generated>
// This code was generated by GeneratedIdentifierSourceGenerator which
// can be found in the LightResults.Extensions.GeneratedIdentifier namespace.
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

#nullable enable

using System.ComponentModel;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;
using LightResults;
using LightResults.Extensions.ValueObjects;

namespace MyProject.Identifiers;

[TypeConverter(typeof(TestIntIdTypeConverter))]
[JsonConverter(typeof(TestIntIdJsonConverter))]
public readonly partial struct TestIntId :
    ICreatableValueObject<int, TestIntId>,
    IParsableValueObject<TestIntId>,
    IValueObject<int, TestIntId>,
    IComparable<TestIntId>,
    IComparable
{
    /// <summary>Gets whether this identifier is the default value.</summary>
    public bool IsDefault => _value == default;

    int IValueObject<int, TestIntId>.Value => _value;

    private readonly int _value;

    private TestIntId(int value, bool skipValidation = false)
    {
        if (!skipValidation)
            ValueObjectException.ThrowIfFailed(Validate(value));

        _value = value;
    }

    /// <inheritdoc />
    public static TestIntId Create(int value)
    {
        var result = TryCreate(value);
        if (result.IsSuccess(out var identifier, out var error))
            return identifier;

        throw new ValueObjectException(error.Message);
    }

    /// <inheritdoc />
    public static Result<TestIntId> TryCreate(int value)
    {
        var validation = Validate(value);
        if (validation.IsFailure(out var error))
            return Result.Failure<TestIntId>(error);

        return Result.Success<TestIntId>(new TestIntId(value, true));
    }

    /// <inheritdoc />
    public static TestIntId Parse(string s)
    {
        var result = TryParse(s);
        if (result.IsSuccess(out var identifier, out var error))
            return identifier;

        throw new ValueObjectException(error.Message);
    }

    /// <inheritdoc />
    public static Result<TestIntId> TryParse(string s)
    {
        if (int.TryParse(s, out var value))
            return TryCreate(value);

        return Result.Failure<TestIntId>("The string is not a valid identifier.");
    }

    /// <inheritdoc />
    public static bool TryParse(string s, out TestIntId identifier)
    {
        return TryParse(s).IsSuccess(out identifier);
    }

    /// <inheritdoc />
    public static bool TryParse(string s, IFormatProvider provider, out TestIntId identifier)
    {
        return TryParse(s).IsSuccess(out identifier);
    }

    /// <inheritdoc />
    public bool Equals(TestIntId other)
    {
        return _value.Equals(other._value);
    }

    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        return obj is TestIntId other && Equals(other);
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        return _value;
    }

    /// <summary>Determines whether two instances of <see cref="TestIntId" /> are equal.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
    public static bool operator ==(TestIntId left, TestIntId right)
    {
        return left.Equals(right);
    }

    /// <summary>Determines whether two instances of <see cref="TestIntId" /> are not equal.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the instances are not equal; otherwise, <c>false</c>.</returns>
    public static bool operator !=(TestIntId left, TestIntId right)
    {
        return !left.Equals(right);
    }

    /// <inheritdoc />
    public int CompareTo(TestIntId other)
    {
        return _value.CompareTo(other._value);
    }

    /// <inheritdoc />
    public int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj))
            return 1;
        return obj is TestIntId other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(TestIntId)}.");
    }

    /// <summary>Determines whether the first instance of <see cref="TestIntId" /> is less than the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is less than the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator <(TestIntId left, TestIntId right)
    {
        return left.CompareTo(right) < 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestIntId" /> is greater than the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is greater than the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator >(TestIntId left, TestIntId right)
    {
        return left.CompareTo(right) > 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestIntId" /> is less than or equal to the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is less than or equal to the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator <=(TestIntId left, TestIntId right)
    {
        return left.CompareTo(right) <= 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestIntId" /> is greater than or equal to the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is greater than or equal to the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator >=(TestIntId left, TestIntId right)
    {
        return left.CompareTo(right) >= 0;
    }

    /// <summary>Gets the underlying value of the <see cref="TestIntId" />.</summary>
    /// <returns>The underlying value of the <see cref="TestIntId" />.</returns>
    public int ToInt32()
    {
        return _value;
    }

    /// <inheritdoc />
    public override string ToString()
    {
        return _value.ToString(CultureInfo.InvariantCulture);
    }

    private static Result Validate(int value)
    {
        if (value < 0)
            return Result.Failure("The value must be equal to or greater than zero.");

        return Result.Success();
    }
}

public sealed class TestIntIdTypeConverter : TypeConverter
{
    public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType)
    {
        return sourceType == typeof(int) || base.CanConvertFrom(context, sourceType);
    }

    public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value)
    {
        if (value is int identifierValue)
            return TestIntId.Create(identifierValue);

        return base.ConvertFrom(context, culture, value);
    }
}

public sealed class TestIntIdJsonConverter : JsonConverter<TestIntId>
{
    public override void Write(Utf8JsonWriter writer, TestIntId identifier, JsonSerializerOptions options)
    {
        var value = ((IValueObject<int, TestIntId>)identifier).Value;
        writer.WriteNumberValue(value);
    }

    public override TestIntId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetInt32();
        return TestIntId.Create(value);
    }
}
